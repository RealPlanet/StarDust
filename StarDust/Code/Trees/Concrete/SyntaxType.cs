namespace StarDust.Code.Syntax
{
    public enum SyntaxType
    {
        BAD_TOKEN = 0x0,

        // Trivia
        SKIPPED_TEXT_TRIVIA,
        WHITESPACE_TRIVIA,
        LINE_BREAK_TRIVIA,
        SINGLE_LINE_COMMENT_TRIVIA,
        MULTI_LINE_COMMENT_TRIVIA,

        // Tokens
        END_OF_FILE_TOKEN,
        NUMBER_TOKEN,
        STRING_TOKEN,
        PLUS_TOKEN,
        PLUS_EQUALS_TOKEN,
        MINUS_TOKEN,
        MINUS_EQUALS_TOKEN,
        STAR_TOKEN,
        STAR_EQUALS_TOKEN,
        SLASH_TOKEN,
        SLASH_EQUALS_TOKEN,
        BANG_TOKEN,
        EQUALS_TOKEN,
        AMPERSAND_TOKEN,
        AMPERSAND_EQUALS_TOKEN,
        DOUBLE_AMPERSAND_TOKEN,
        PIPE_TOKEN,
        PIPE_EQUALS_TOKEN,
        DOUBLE_PIPE_TOKEN,
        DOUBLE_EQUALS_TOKEN,
        BANG_EQUALS_TOKEN,
        LESS_TOKEN,
        LESS_OR_EQUALS_TOKEN,
        GREATER_TOKEN,
        GREATER_EQUAL_TOKEN,
        OPEN_PARENTHESIS_TOKEN,
        CLOSE_PARENTHESIS_TOKEN,
        OPEN_BRACE_TOKEN,
        CLOSE_BRACE_TOKEN,
        COLON_TOKEN,
        IDENTIFIER_TOKEN,
        TILDE_TOKEN,
        HAT_TOKEN,
        HAT_EQUALS_TOKEN,
        COMMA_TOKEN,
        SEMICOLON_TOKEN,

        // Keywords
        BREAK_KEYWORD,
        CONTINUE_KEYWORD,
        FALSE_KEYWORD,
        TRUE_KEYWORD,
        CONST_KEYWORD,
        VAR_KEYWORD,
        IF_KEYWORD,
        ELSE_KEYWORD,
        WHILE_KEYWORD,
        DO_KEYWORD,
        FOR_KEYWORD,
        TO_KEYWORD,
        FUNCTION_KEYWORD,
        RETURN_KEYWORD,

        // Node
        COMPILATION_UNIT,
        ELSE_CLAUSE,
        TYPE_CLAUSE,
        GLOBAL_STATEMENT,
        PARAMETER,
        FUNCTION_DECLARATION,

        // Statements
        BLOCK_STATEMENT,
        VARIABLE_DECLARATION,
        EXPRESSION_STATEMENT,
        IF_STATEMENT,
        WHILE_STATEMENT,
        DO_WHILE_STATEMENT,
        FOR_STATEMENT,
        BREAK_STATEMENT,
        CONTINUE_STATEMENT,
        RETURN_STATEMENT,

        // Expression
        LITERAL_EXPRESSION_NODE,
        TOKEN_EXPRESSION_NODE,
        COMPOUND_ASSIGNMENT_EXPRESSION_NODE,
        UNARY_EXPRESSION_NODE,
        BINARY_EXPRESSION_NODE,
        NAME_EXPRESSION_NODE,
        ASSIGNMENT_EXPRESSION_NODE,
        PARENTHESIZED_EXPRESSION_NODE,
        CALL_EXPRESSION_NODE,
    }
}
